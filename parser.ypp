%{
    #include<iostream>
    #include "hw3_output.hpp"
    using namespace std;
    using namespace output;

    int yylex();
    void yyerror(char const*);
    extern int yylineno;
%}

%nonassoc IF

%token NUM
%token VOID
%token INT
%token BYTE
%token B
%token BOOL







%token TRUE
%token FALSE
%token RETURN

%token WHILE
%token BREAK
%token CONTINUE
%token SC
%token COMMA
%token LBRACE
%token RBRACE
%token ID
%token STRING

%left ASSIGN

%left OR
%left AND

%left RELOP

%left ADD_MIN
%left MUL_DIV

%right NOT

%left RPAREN
%left LPAREN

%nonassoc ELSE

%%
Program: Funcs {printProductionRule(1);}


 Funcs: /*epsilon*/ {printProductionRule(2);}
		| FuncDecl Funcs {printProductionRule(3);}


 FuncDecl: RetType ID LPAREN Formals RPAREN LBRACE Statements RBRACE
 {printProductionRule(4);}


 RetType: Type {printProductionRule(5);}
		  | VOID {printProductionRule(6);}


 Formals: /*epsilon*/ {printProductionRule(7);}
		  | FormalsList {printProductionRule(8);}


 FormalsList: FormalDecl {printProductionRule(9);}
			  | FormalDecl COMMA FormalsList {printProductionRule(10);}


 FormalDecl: Type ID {printProductionRule(11);}


 Statements: Statement {printProductionRule(12);}
			 | Statements Statement {printProductionRule(13);}


 Statement: LBRACE Statements RBRACE {printProductionRule(14);}
            | Type ID SC {printProductionRule(15);}
			| Type ID ASSIGN Exp SC {printProductionRule(16);}
			| ID ASSIGN Exp SC {printProductionRule(17);}
			| Call SC {printProductionRule(18);}
			| RETURN SC {printProductionRule(19);}
			| RETURN Exp SC {p     rintProductionRule(20);}
			| IF LPAREN Exp RPAREN Statement {printProductionRule(21);}
			| IF LPAREN Exp RPAREN Statement ELSE Statement {printProductionRule(22);}
			| WHILE LPAREN Exp RPAREN Statement {printProductionRule(23);}
			| BREAK SC {printProductionRule(24);}
			| CONTINUE SC {printProductionRule(25);}


Call: ID LPAREN ExpList RPAREN {printProductionRule(26);}
      | ID LPAREN RPAREN {printProductionRule(27);}


ExpList: Exp {printProductionRule(28);}
         | Exp COMMA ExpList {printProductionRule(29);}


Type: INT {printProductionRule(30);}
      | BYTE {printProductionRule(31);}
	  | BOOL {printProductionRule(32);}

Exp: LPAREN Exp RPAREN {printProductionRule(33);}
	 | Exp IF LPAREN Exp RPAREN ELSE Exp {printProductionRule(34);}
     | Exp ADD_MIN Exp {printProductionRule(35);}
     | Exp MUL_DIV Exp {printProductionRule(35);}
	 | ID {printProductionRule(36);}
	 | Call {printProductionRule(37);}
	 | NUM {printProductionRule(38);}
	 | NUM B {printProductionRule(39);}
	 | STRING {printProductionRule(40);}
	 | TRUE {printProductionRule(41);}
	 | FALSE {printProductionRule(42);}
	 | NOT Exp {printProductionRule(43);}
	 | Exp AND Exp {printProductionRule(44);}
	 | Exp OR Exp {printProductionRule(45);}
	 | Exp RELOP Exp {printProductionRule(46);}
	 | LPAREN Type RPAREN Exp {printProductionRule(47);}

%%

int main()
{
    return yyparse();
}

void yyerror(char const* s){
    errorSyn(yylineno);
}